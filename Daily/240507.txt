day9

✅ 🛠️ ⭐

⭐문장을 코딩 조건으로 바꾸는 연습 ⭐좋은 코드를 많이 보아야 함. 질문하기 왜? 무엇을 위해?
⭐같은 뜻이 다른 말로 불리는 경우가 많다.

1:
 - 숙제점검
 - ⭐⭐⭐ 오전수업(homework05_StudentTest.java) 복습 꼭 할 것 
 - 처음 실행되는 메소드부터 [ctrl+클릭]으로 따라 가보라 (분석)

2:✅
중첩클래스 : // 많이 사용되지 않음.
 - static :  외부클래스에 객체 생성 없이도 객체를 만들 수 있다.
 - 인스턴스(멤버변수와 같은 형태로 만들어진) : 인스턴스 변수와 메소드처럼 외부클래스 객체가 먼저 생성되어야 생성할 수 있음.
 - 지역(메소드 안에 선언되는) : 객체 생성x, 다른 곳에서 접근x
 - 익명(인터페이스 및 추상클래스) : {구현부}를 모두 선언 해야함.
 - 기억할 것 : 중첩 생성 된 내부클래스는 무조건 외부클래스가 먼저 생성(선언) 되어야 사용할 수 있음. 근데 static은 제외.


3:✅
객체배열 :
 - 선언방법 : 🛠️[ 클래스명[] 배열명 = new 클래스명[생성할 배열의 크기]; ]
 - 초기화 방법 : 🛠️[ 클래스명[] 배열명 = { new 생성자, new 생성자, new 생성자 }; ]
 - 사용방법 : 🛠️[ 배열[index].클래스의 멤버변수, 메소드 호출; ]
 - 기억할 것 : 인터페이스 상속 받은 클래스는 자식클래스에서 메소드 구현부 초기화(?) 해야 함.
	     : 리턴타입이 객체니까 객체만 됌.
	     : 인터페이스 배열의 요소는 해당 인터페이스 상속 받은 놈들만 저장 됌.

4:✅
⭐⭐⭐ 예외처리 : 
 - 설명 : 프로그램이 강제 종료되는 것을 막거나 에러에 로그로 남겨서 에러가 발생하지 않도록 소스코드를 수정하는 행위
 - Exception의 종류 : 무조건 예외처리 코드를 작성해야하는 Checked Exception과 않아도 되는 Unchecked Exception이 있다.
	- ( 무조건 예외처리 해야되면 하고 아닌 건 트라이캐치 ㄱ )
 - 예외처리 방법 : 
	- try~catch~finally 블록 :
	- 사용방법 : 🛠️[ try{} catch(에러 이름){ syso(이름.getMessage()); } catch(Exception e){ syso(e.getMessage()); } ]
		- 기억할 것 : try~catch, catch(Exception e) { getMessage(); }
	- throws Exception(추천x / try~catch로 걍 예외처리해라)
	- 사용방법 : 🛠️[ 리턴타입 메소드명(매개변수) throws 예외클래스 {} ]

5: 
많이 사용되는 클래스 알아보기:
java.lang 패키지:












