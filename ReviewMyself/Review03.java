package test;

public class Review03 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
//		상속 :
//
//			 - 상속 방법 : 🛠️[ 접근제어자 자식클래스 extends 부모클래스 {} ]
//			 - 이미 존재하는 클래스를 재사용하여 새로운 클래스를 만들어내는 작업.
//			 - 특징 : 자식클래스(상위)는 부모클래스(하위)의 속성과 기능을 사용할 수 있다.
//			 - 목적 : (코드품질향상)소스코드 단축과 소스코드 재사용성 향상 등. 개인적으로는 효율성에 목적이 있다고 생각함.
//
//			(근희왈별다섯개)다형성 :
//
//			 - 
//
//
//			super 키워드 :
//
//			 - 자식클래스에서 부모클래스의 변수나 메소드, 생성자에 접근하거나 호출하려면 super라는 키워드를 사용한다.
//			 - 호출 방법 : 🛠️[ super.메소드명(); ]
//			 - 특징 : 자식클래스 객체를 생성할 때 => 자식클래스 생성자 속에 부모클래스 생성자가 먼저 호출 되어야함.
//					- 예 : 🛠️[ public 자식클래스() { super(); 후에  나머지 작업 } ] 
//
//
//			추상화 :
//
//			 - 선언 방법 : 🛠️[ 접근제어자 abstract class 클래스명 {} ]
//			 - 특징 : 인스턴스화 불가능 => 객체 생성x
//			 - 멤버변수와 일반메소드, 추상메소드를 가질 수 있음.
//
//			추상메소드 :
//			 - 선언 방법 : 🛠️[ abstract 리턴타입 메소드명(매개변수); ]     //  얘는 구현부가 없기 때문에 {}가 없음.
//
//
//			인터페이스 :
//
//			 - 선언 방법 : 🛠️[ 접근제어자 interface 인터페이스명 {} ]
//			 - 상속 방법 : 클래스에게 상속🛠️ [ 접근제어자 클래스명 implements 인페명 {} ] 
//					  : 인터페이스에게 상속 🛠️ [ 접근제어자 interface 인페명 extends 인페명 ]
//			 - 특징 : 추상메소드와 public static final로 선언된 변수만 가질 수 있음.
//			 - default 메소드 :
//				- 선언 방법 : 🛠️[ (접근제어자생략시public) default 리턴타입 메소드명() { } ]


	}

}
