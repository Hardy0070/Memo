package test;

public class Review02 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
//		메소드 :
//
//			 - 다양한 이름 : 기능, 구현부
//			 - 정의 : 어떤 값들(매개변수)을 받아서 일련의 처리 과정을 만드는 것.
//			 - 사용법(형태) : 🛠️[ 접근제어자 리턴타입 메소드명(매개변수) { 기능처리 return; } ]
//			 - 특징 : 결과 값이 있는 메소드는 항상 return문으로 리턴타입으로 지정된 타입의 값을 반환해줘야 한다.
//			 		- 예 : [ public int add() { return 10 + 20; }
//
//
//			클래스 :
//
//			 - 다양한 이름 : 객체, 설계도
//			 - 정의 : 클래스는 설계도의 역할을 하면서 사용자가 직접 정의하는 자료형 타입이라고 볼 수 있다.
//			 - 선언법 : 🛠️[ 접근제어자 리턴타입 클래스명 { 속성(인스턴스변수) + 기능(인스턴스메소드)} ]
//
//			인스턴스화(객체화)(객체생성):
//
//			 - 클래스를 객체(변수 같이)로 만들어 주는 작업을 객체화라고 한다.
//			 - new 키워드와 생성자 메소드를 사용하여 진행 한다.
//			 - 객체화는 객체를 메모리에 저장하는 작업을 말한다. 메모리에 저장되며 타입들이 초기화 되는데 이 작업을 진행하는 메소드가 생성자메소드이다.
//
//			생성자메소드 :
//
//			1. 기본생성자
//			 - 선언법(형태) : 🛠️[ 접근제어자 클래스명() {} ]
//			 - 특징 : 리턴타입이 없고 클래스명과 동일한 이름을 갖음.
//			 - ? : 다른 클래스에서 해당 클래스를 객체화 하기 위해 생성하는 것 같다.
//
//			2. 매개변수가 있는 생성자
//			 - 선언법(형태) : 🛠️[ 접근제어자 클래스명(매개변수) { } ]
//
//
//			인스턴스 변수와 인스턴스 메소드 :
//			 - 인스턴스 변수와 인스턴스 메소드는 객체를 생성 후 사용가능한 변수와 메소드. 일반적으로 클래스에 선언되어 있는 변수와 메소드를 의미함.
//			 - 클래스 생성법 : 🛠️[ 클래스명 변수명 = new 클래스명(); ]
//			 - 인스턴스 변수와 메소드 사용법 : 🛠️[ 변수명.인스턴스변수명 = 타입값; ] 🛠️[ 변수명.인스턴스메소드명(): ]
//
//			static(클래스) 변수와 static(클래스) 메소드 :
//			 - static 변수 선언법(형태) : 🛠️[ 접근제어자 static 타입 변수명; ]
//			 	- 사용법 : 🛠️[ 클래스명.변수명; ] 
//			  - static 메소드 선언법(형태) : 🛠️[ 접근제어자 static 리턴타입 메소드명() {} ]
//				- 사용법 : 🛠️[ 클래스명.메소드명(); ]
//
//
//
//
//			!!! 인스턴스 변수 = 멤버변수 = 객체의 속성 = 객체의 상태








	}

}
